<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/comfy.js/dist/comfy.min.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet'>
  </head>
  <style>
    body {
      margin:0px;
    }
    #SODivs {
      font-family: 'Audiowide';
      font-size: 3em;
      word-wrap: none;
      visibility: hidden;
      top:0px;
      position:absolute;
      z-index: 10;
      text-align: center;
      width:100%;
      -webkit-text-stroke: 1px black;
        color: white;
        text-shadow:
        3px 3px 0 #000,
        -1px -1px 0 #000,  
        1px -1px 0 #000,
        -1px 1px 0 #000,
        1px 1px 0 #000;
        
    }
    #vids {
      visibility: hidden;
      width:100%;
      height:100%;
      top:0px;
      position: absolute;
    }
	#streamerName {
		color: #5e199e;
	}
  </style>
  <body>
    <div id="SODivs"><span id="SOTitle"></span><span id="streamer">streamer</span></div>
    <div id="player">
    <video id="vids" style="background-color: rgba(42, 179, 94, 0);" width="100%" height="100%" autoplay >
      <source src="" type="video/mp4">
      Your browser does not support the video tag.
    </video>
        <script type="text/javascript">
            //configfile here
            // JavaScript source code
            // Global Config for channel setup

            var globalConfig = {
                clientid: '<clientID>',
                clientSec: '<clientSec>',
                channelName: '<Channel Name>',
                //oAuth Requires these scopes: channel:read:redemptions user:read:email chat:edit chat:read and if you want Clips clips:edit
                //Generate oAuth from twitchtokengenerator.com
                oAuth: '<oAuth>', //required only if you want to chat back, otherwise DO NOT TOUCH    
                channelClientID: '<client oAuth ID>' //This is clip client id
            }

            //ShoutoutRepeat
            var AlwaysRepeat = 'brb';
            var AlwaysRepeat2 = 'beback';
            var AlwaysRepeatText = "Be Right Back";
            var NoRepeat = 'hype';
            var NoRepeat2 = 'hypes'
            var NoRepeatText = 'HYPE';
            var stop = 'off' //Stop BRB/Hyper.
            var Repeat = 2; //Set to 0 if you want this to autostart without a command.

            //Shoutout Cmds
            var cmd1 = 'shoutout';
            var cmd2 = 'so';
            var cmd3 = 'SuperEvilMonkey420'
            var cmd4 = 'SEM420'
            var resetso = 'resetso'
            var onRaid = 'RaidOn' //Auto Shoutout on Raids On!
            var minRaid = 'RaidMin' //Change the Min to AutoShout On Raids live
            var minCheer = 'CheerMin' //Change the Min to Auto shoutout on Cheer Live
            var onCheer = 'CheerOn' //Auto Shoutout on Cheer
            var ShoutOutDelayBits = 8000; //Shoutout Delay for Auto Cheer, in ms
            var offRaid = 'RaidOff' //Turn AutoShout On Raid Off
            var offCheer = 'CheerOff' //Turn Auto Shout On on Cheer Off
            var onClip = 'ClipOn' //Turn on Clips
            var offClip = 'ClipOff' //Turn Shoutout Clips off
            var allOff = 'AllOff' //Turn off Everything
            var allOn = 'AllOn' //Turn on Everything

            var Everyone = 'oldman'; //Shouts out everyone with a Speak of 1 and drops into Chat a ShoutOut
            var VipsOnly = 'agent47';//Shouts out VIP's (Array you listed at 2) and a Speak of 1
            var SilentEVERYONE = 'leon';//Shouts out everyone with a Speak of 1, no Chat Spam
            var SilentVips = 'saso';//Shouts out VIP's (Array you listed at 2) and a Speak of 1, no Chat Spam
            //Shout User for String is @{user}
            //Last Game They played is @{lastGame}
            var ShoutOut =  'Go get to know @@{user} who was last seen playing @{lastGame}. You can give them a follow at https://twitch.tv/@{user}';
            var RaidMsg = "You Deadset Legend! Thank you @{user} for the RAID!!! Everyone check out our Bark Lord Certified Friend @ https://www.twitch.tv/@{user} who was playing @{lastGame}";

            //shoutVars
            var RaidOn = true //Default to Raid Shout outs on!
            var RaidMin = 1 //Min Viewers to Trigger
            var CheerOn = true //Default to Cheer Shouts Outs on!
            var CheerMin = 1 //Min Cheer to Trigger
            var ClipOn = true //Allow Clip Shoutouts
            var allowClip = true //Allow Clips
            var recentClips = true //Do we go for recent clips or all.
            var dateRange  = 30 //How many days back to look for clips
            var dateRaidRange = 15 //How Many Days back to look for clips for Raids
            var minClips = 5 //How Many Clips for recent do we need to pull to continue.


            //Clip & Discord Vars
            var clipcmd  = 'clip' //Make a Clip
            var clipcmd2 = 'snap' //Alternate Make a Clip Command
            var allowClip = true //Allow Clips
            var ClipAllow = 'ChatClip' //Turns Chat clipping on and off
            var ClipInterval = 5000; //How Long between creating clips, in ms
            var ClipDelay = 5000; //How Many Seconds to wait before looking for the clip in ms (need to be at least 3000 ms)
            var discordWebhook = 'https://discord.com/api/webhooks/891391878937849866/QjkAmNOGvxw10B5mSgd-v4RrkZZcvLe9Ey-H-ljwtvf6soJJZ5_2LspZHYhjJmIj6pU3'; //Webhook to Discord Channel to Post
            var discordBot = 'Shamis Clip Bot' //Change this to match your discord if you want
            var avatar_url = 'https://i.imgur.com/BfaGUYz.png' //This is a public Internet facing Picture file for the Discord Avatar. Optional
            var contentStr = ' is a legend for clipping this ' //This is anything you want to put in front of the Message for your Clip.

            //Shoutout Title above, if you don't want a title set showTitle: false
            var shoutoutConfig = {
                showTitle: true,
                title: '<Shoutout Title Text>'
            }

            //Gen 4 streamer/bots
            //Gen 2 VIP
            //Speak 2 - DO NOT SHOUTOUT
            //Speak 1 - Always Shoutout
            //Speak 0 - Only Shoutout when chat/lurking on Channel

            var clipsArray = [
                { name: '<channel name>', gen: 4, speak: 2  }
                //VIP's 
                //,{name: <channelName>. gen: 2, speak: 0 } 
                ,{ name: '<VIP>', gen: 2, speak: 0 }
                ,{ name: '<VIP2>', gen: 2, speak: 0 }
                //Regulars
                //,{name: <channelName>. gen: 1, speak: 0 } 
                ,{ name: '<regular>', gen: 1, speak: 0 }
                //Well known Bots
                ,{ name: 'streamelements', gen:4, speak: 2}
                ,{ name: 'streamlabs', gen:4, speak: 2}
                ,{ name: 'nightbot', gen:4, speak: 2}
                ,{ name: 'moobot', gen:4, speak: 2}
                ,{ name: 'wisebot', gen:4, speak: 2}
                ,{ name: 'rainmaker', gen:4, speak: 2}
                ,{ name: 'SoundAlerts', gen:4, speak: 2}
                ,{ name: 'fossabot', gen:4, speak: 2}
            ];

            //cheer Bits To Limit Auto shoutout
            var cmdBits = [
                { name: '<channel Name>', bitties: 0}
            ]
            //Regular Code here
            // Go get to know @" + element.name + ". You can give them a follow at https://twitch.tv/" + element.name
            var video = document.getElementById('vids');
            var container = document.getElementById('vids');
            var SODivs = document.getElementById('SODivs');
            var streamer = document.getElementById('streamer');
            var clips = [];
            var names = [];            
            var isVidActive;
            var mp4Name;            
            var clientid = globalConfig.clientid;
            var clientSec = globalConfig.clientSec;            
            var clientAuth;
            var soChannel;
            var soID;
            var boardSOID;
            var boardstr = globalConfig.channelName;
            SOTitle.innerHTML = shoutoutConfig.title;

            container.style.visibility = 'hidden';
            var oAuth = new XMLHttpRequest();
            oAuth.onreadystatechange = () => {
            if (oAuth.readyState === XMLHttpRequest.DONE) {
                clientAuth = JSON.parse(oAuth.responseText).access_token;
                getBroadSOID();
                console.log(clientAuth);                
                }
            };
            oAuth.open("POST",'https://id.twitch.tv/oauth2/token?client_id='+clientid+'&client_secret='+clientSec+'&grant_type=client_credentials');
            oAuth.send();

            ComfyJS.onCommand = ( user, command, message, flags, extra ) => {
                console.log(command)
                
                if(command == resetso && flags.broadcaster || command == resetso && flags.mod){
                    location.reload();
                }

                if (flags.broadcaster && command === onRaid.toLowerCase()|| flags.mod && command === onRaid.toLowerCase() )
                {
                    RaidOn = true;
                }
                if (flags.broadcaster && command === offRaid.toLowerCase() || flags.mod && command === offRaid.toLowerCase() )
                {
                    RaidOn = false;
                }
                if (flags.broadcaster && command === onCheer.toLowerCase() || flags.mod && command === onCheer.toLowerCase() )
                {
                    CheerOn = true;
                }
                if (flags.broadcaster && command === offCheer.toLowerCase() || flags.mod && command === offCheer.toLowerCase() )
                {
                    CheerOn = false;
                }
                if (flags.broadcaster && command === onClip.toLowerCase() || flags.mod && command === onClip.toLowerCase() )
                {
                    ClipOn = true;
                }
                if (flags.broadcaster && command === offClip.toLowerCase() || flags.mod && command === offClip.toLowerCase() )
                {
                    ClipOn = false;
                    console.log('I turned off the Clip?')
                }
                if (flags.broadcaster && command === allOn.toLowerCase() || flags.mod && command === allOn.toLowerCase() )
                {
                    ClipOn = true;                    
                    CheerOn = true;
                    RaidOn = true;
                }
                if (flags.broadcaster && command === allOff.toLowerCase() || flags.mod && command === allOff.toLowerCase() )
                {
                    ClipOn = false;
                    CheerOn = false;
                    RaidOn = false;
                }              
                if (flags.broadcaster && command === minCheer.toLowerCase() || flags.mod && command === minCheer.toLowerCase() )
                {
                    var n  
                    n = parseInt(message);
                    console.log(n)
                    if (!(isNaN(n)))
                    {   
                        CheerMin = n
                        console.log(CheerMin)
                    }
                }
                if (flags.broadcaster && command === minRaid.toLowerCase() || flags.mod && command === minRaid.toLowerCase() )
                {
                    
                    var n  
                    n = parseInt(message);
                    console.log(n)
                    if (!(isNaN(n)))
                    {                        
                        RaidMin = n
                        console.log(RaidMin)
                    }
                }
                if (flags.broadcaster && command === ClipAllow.toLowerCase() || flags.mod && command === ClipAllow.toLowerCase() )
                {
                    if (allowClip)
                    {
                        allowClip = false;
                        //console.log("AllowClip should be false");
                        //console.log(allowClip)
                    } 
                    else {                        
                        allowClip = true;
                        //console.log("AllowClip should be true");
                        //console.log(allowClip)
                    }
                }
                if ((command === clipcmd.toLowerCase() || command === clipcmd2.toLowerCase()) && allowClip === true && globalConfig.oAuth != '<oAuth>')
                {
                    console.log("extra:" + extra.sinceLastCommand.user )
                    if (extra.sinceLastCommand.user >= ClipInterval || extra.sinceLastCommand.user == 0)
                    {
                        makeClip(user);
                    } else {
                        ComfyJS.Say("Sorry you can only clip once every " + ClipInterval +" ms")
                    }
                }
                if (ClipOn === true) 
                {
                    if( flags.broadcaster && command == cmd1 || flags.mod && command == cmd1 || flags.broadcaster && command == cmd2 || flags.mod && command == cmd2 || flags.broadcaster && command == cmd3 || flags.mod && command == cmd3 || flags.broadcaster && command == cmd4 || flags.mod && command == cmd4  ) {
                        soChannel = message.replace("@", "");
                        if (globalConfig.oAuth != '<oAuth>')
                                {
                                    console.log("hello halos")
                                    barks(soChannel,'SO');
                                } 
                        barkLord(soChannel);                    
                    }
                    //console.log ("Clip is On")
                    if (flags.broadcaster && command == Everyone || flags.mod && command == Everyone) {                    
                            clipsArray.forEach(element => {
                            if (element.speak > 0 && element.speak < 2) {
                                console.log(element.name);                        
                                if (globalConfig.oAuth != '<oAuth>')
                                    {                                    
                                        barks(element.name,'SO');
                                    }                                        
                                    barkLord(element.name);
                                }                     
                            });                   
                    }
                    if (flags.broadcaster && command == VipsOnly || flags.mod && command == VipsOnly) {
                            clipsArray.forEach(element => {
                                if (element.speak > 0 && element.speak < 2 && element.gen == 2) {
                                    console.log(element.name);                        
                                    if (globalConfig.oAuth != '<oAuth>')
                                        {                                    
                                            barks(element.name,'SO');
                                        }    
                                        barkLord(element.name);
                                }
                            });
                    }                    
                    if (flags.broadcaster && command == SilentEVERYONE || flags.mod && command == SilentEVERYONE) {                    
                        clipsArray.forEach(element => {
                            if (element.speak > 0 && element.speak < 2) {
                                console.log(element.name);
                                barkLord(element.name);
                            }
                        });
                    }
                    if (flags.broadcaster && command == SilentVips || flags.mod && command == SilentVips) {                    
                        clipsArray.forEach(element => {
                            if (element.speak > 0 && element.speak < 2 && element.gen == 2) {
                                console.log(element.name);
                                barkLord(element.name);
                            }
                        });
                    }
                    if (flags.broadcaster && command == 'solo' || flags.mod && command == 'solo') {
                        //Add in to do BRB work while Streamer is off. May move into BRB code insteads
                    }
                }
            }
            

            if (globalConfig.oAuth == '<oAuth>')
            {
                ComfyJS.Init( boardstr );
            } else {
                ComfyJS.Init( boardstr , "oauth:" + globalConfig.oAuth );
            }

            ComfyJS.onJoin = (user, self, extra) => {
                console.log(user);
                let Use = user;
                Use = Use.toLowerCase();
                //console.log (extra);        
                let Ind = clipsArray.findIndex((obj => obj.name == Use));
                if (Ind != -1) {
                    if (clipsArray[Ind].speak == 0 && clipsArray[Ind].gen == 2) {
                        clipsArray[Ind].speak = 1;
                    }
                } else { 
                    clipsArray.push({ name: Use, gen: 0, speak: 0 });   
                }
            }

            ComfyJS.onChat = (user, message, flags, self, extra) => {                
                let Use = user;
                Use = Use.toLowerCase();
                let Ind = clipsArray.findIndex((obj => obj.name == Use));
                if (Ind != -1) {
                    if (clipsArray[Ind].speak == 0) {
                        clipsArray[Ind].speak = 1;
                    }
                } else {
                    clipsArray.push({ name: Use, gen: 1, speak: 1 });
                }
            }

            ComfyJS.onRaid = ( user, viewers, extra ) => {                
                console.log('RAID!!!!' + user + ':' + viewers);
                if (RaidOn === true && viewers >= RaidMin)
                {
                    if (globalConfig.oAuth != '<oAuth>')
                        {                                    
                            barks(user,'RAID');
                        }    
                    if (recentClips == true)
                    {
                        LordOfTheSith(user,dateRaidRange);
                    } else 
                    {
                        bL(user);
                    }
                }
                //console.log(user);           
            }
            
            ComfyJS.onCheer = ( user, message, bits, flags, extra ) => {
                console.log(user + '-' + message + '-' + bits);
                if (bits >= CheerMin && CheerOn === true)
                {
                    let Use = user;
                    Use = Use.toLowerCase(); 
                    let Ind = cmdBits.findIndex((obj => obj.name == Use));
                    if (Ind = -1)
                    {                    
                        cmdBits.push({ name: Use, bitties: bits});  
                        setTimeout(() => {
                            if (globalConfig.oAuth != '<oAuth>')
                            {                                    
                                barks(user,'SO');
                            }    
                            barkLord(user);      
                        }, ShoutOutDelayBits);                    
                    } 
                    else {  
                        if (cmdBits[Ind].bitties <= bits)
                        {
                            if (globalConfig.oAuth != '<oAuth>')
                                {                                    
                                    barks(user,'SO');
                                }  
                        } 
                        else
                        {
                            cmdBits[Ind].bitties = bits
                            setTimeout(() => {
                                if (globalConfig.oAuth != '<oAuth>')
                                    {                                    
                                        barks(user,'SO');
                                    }    
                                barkLord(user);      
                            }, ShoutOutDelayBits);
                        }  
                    }
                } else {
                    console.log('Cheer occurred under Min:' + bits)
                }
            }

            async function makeClip(userName)
            {                
                password = "Bearer " + globalConfig.oAuth                
                chanClientId = globalConfig.channelClientID                
                let validation = await fetch( "https://api.twitch.tv/helix/clips?broadcaster_id="+boardSOID, {
                    method: 'POST',
                    headers: {
                        "client-Id": chanClientId,
                        "Authorization": password
                    }}).then( r => r.json() );
                
                console.log(validation)
                let val = validation.data[0].id
                console.log(val);
                getClip(val,userName);                
            }

            function getClip(clipName,userName)
            {
                setTimeout(() => {
                var UN = userName;
                console.log("hello")                
                var oClip = new XMLHttpRequest();
                oClip.onreadystatechange = () => {
                    if (oClip.readyState === XMLHttpRequest.DONE)
                    {
                        console.log(oClip)
                        clipStuff = JSON.parse(oClip.responseText);                                
                        clipStuff = clipStuff.data[0].url;
                        console.log(clipStuff);
                        ComfyJS.Say("Hey look a new clip everyone: " + clipStuff);
                        sendMessage(clipStuff,UN)
                    }
                }
                password = "Bearer " + globalConfig.oAuth                
                chanClientId = globalConfig.channelClientID
                getURL = "https://api.twitch.tv/helix/clips?id="+clipName
                console.log(getURL)
                oClip.open("GET",getURL)
                oClip.setRequestHeader('client-id', chanClientId)
                oClip.setRequestHeader('Authorization', password);
                oClip.send();
                }, ClipDelay)
            }

            function sendMessage(clipUrl,UN) {
                if (discordWebhook != '<Enter WebHook>')
                    {   
                        var conStr = '';
                        var ava = '';
                        if (avatar_url != '<Enter Avatar URL Img>' )
                            {
                                 ava = avatar_url
                            } else {
                                 ava = ''
                            }               
                        if (contentStr != '<Enter String>')
                            {
                                conStr = UN + " " + contentStr + " ";
                            }   else {
                                conStr = UN + " ";
                            }  
                        conStr = conStr + " " + clipUrl
                        const request = new XMLHttpRequest();                        
                        request.open("POST", discordWebhook);
                        request.setRequestHeader('Content-type', 'application/json');

                        const params = {
                            username: discordBot,
                            avatar_url: ava,
                            content: conStr
                        }
                    request.send(JSON.stringify(params));
                    }
            }

            function getBroadSOID() {
                var oUser = new XMLHttpRequest();
                oUser.onreadystatechange = () => {
                if (oUser.readyState === XMLHttpRequest.DONE) {
                    boardSOID = JSON.parse(oUser.responseText);
                    boardSOID = boardSOID.data[0].id
                    console.log('SOD');
                    console.log(boardSOID);
                }
                };
                oUser.open("GET","https://api.twitch.tv/helix/users?login="+boardstr);
                oUser.setRequestHeader('client-id', clientid);
                oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
                oUser.send();
                console.log(oUser);      
            };

            function barks(user, SOorRaid)
            {
                var oUser = new XMLHttpRequest();
                oUser.onreadystatechange = () => {
                    //console.log(soID);
                    if (oUser.readyState === XMLHttpRequest.DONE)  {
                        soID = JSON.parse(oUser.responseText);                        
                        soID = soID.data[0].id;
                        function reqListener () {
                            game = JSON.parse(this.responseText);                                                                      
                            lastGame = game.data[0].game_name;
                            uName = game.data[0].broadcaster_name;
                            //Shout User for String is ${user}
                            //Last Game They played is ${lastGame}
                            console.log(game)
                            if (SOorRaid == 'SO')
                            {
                                var Out = ShoutOut.replace(/@{user}/g,uName);
                            } else {
                                var Out = RaidMsg.replace(/@{user}/g,uName);
                            }
                            Out = Out.replace(/@{lastGame}/g,lastGame);                            
                            ComfyJS.Say(Out);                            
                        }
                        var oReq = new XMLHttpRequest();                    
                        oReq.addEventListener("load", reqListener);                        
                        oReq.open("GET","https://api.twitch.tv/helix/channels?broadcaster_id="+soID)
                        oReq.setRequestHeader('client-id', clientid);
                        oReq.setRequestHeader('Authorization', 'Bearer '+ clientAuth);                    
                        oReq.send();
                        console.log(oReq);
                        console.log("So Command Triggered");
                    }
                }  
                oUser.open("GET","https://api.twitch.tv/helix/users?login="+user);
                oUser.setRequestHeader('client-id', clientid);
                oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
                oUser.send();
                console.log(user)
                //console.log(oUser);
            }

            function LordOfTheSith (soChannel, lenOfTime) {
                var today = new Date();
                    var oneMonthAgo = new Date();
                    oneMonthAgo.setDate(oneMonthAgo.getDate() - lenOfTime);
                    var oUser = new XMLHttpRequest();
                    oUser.onreadystatechange = () => {
                    if (oUser.readyState === XMLHttpRequest.DONE) {
                        soID = JSON.parse(oUser.responseText);
                        soID = soID.data[0].id
                        console.log(soID);
                        //Start
                            function reqListener () {
                                mp4Name = JSON.parse(this.responseText); 
                                if (mp4Name.data.length >= minClips)
                                {                                         
                                    var RanClip = Math.floor(Math.random() * mp4Name.data.length);
                                    mp4Name = mp4Name.data[RanClip].thumbnail_url
                                    let submp4 = mp4Name.split('-preview');
                                    console.log(submp4[0]+".mp4");
                                    console.log(mp4Name);
                                        if(mp4Name.length > 5) {
                                        clips.push(submp4[0]+".mp4");
                                        names.push(soChannel);
                                        //commandType.push("clip");
                                        console.log("Clip Found");
                                        } else {
                                        console.log("No Clips Found");
                                        }
                                } else {
                                    bL(soChannel);
                                }
                            }                            
                            var oReq = new XMLHttpRequest();                    
                            oReq.addEventListener("load", reqListener);
                            //oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+"&first=100")
                            oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+"&first=100&started_at="+oneMonthAgo.toISOString()+"&ended_at="+today.toISOString())                            
                            oReq.setRequestHeader('client-id', clientid);
                            oReq.setRequestHeader('Authorization', 'Bearer '+ clientAuth);                    
                            oReq.send();
                            console.log(oReq);
                            console.log("So Command Triggered");                            
                        //finish
                        }
                    };
                    oUser.open("GET","https://api.twitch.tv/helix/users?login="+soChannel);
                    oUser.setRequestHeader('client-id', clientid);
                    oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
                    oUser.send();
                    console.log(oUser);
            }

            function bL(soChannel) {
                    var today = new Date();
                    var oneMonthAgo = new Date();
                    oneMonthAgo.setDate(oneMonthAgo.getDate() - 30);
                    var oUser = new XMLHttpRequest();
                    oUser.onreadystatechange = () => {
                    if (oUser.readyState === XMLHttpRequest.DONE) {
                        soID = JSON.parse(oUser.responseText);
                        soID = soID.data[0].id
                        console.log(soID);
                        //Start
                            function reqListener () {
                                mp4Name = JSON.parse(this.responseText);                                          
                                var RanClip = Math.floor(Math.random() * mp4Name.data.length);
                                mp4Name = mp4Name.data[RanClip].thumbnail_url
                                let submp4 = mp4Name.split('-preview');
                                console.log(submp4[0]+".mp4");
                                console.log(mp4Name);
                                    if(mp4Name.length > 5) {
                                    clips.push(submp4[0]+".mp4");
                                    names.push(soChannel);
                                    //commandType.push("clip");
                                    console.log("Clip Found");
                                    } else {
                                    console.log("No Clips Found");
                                    }
                            }                            
                            var oReq = new XMLHttpRequest();                    
                            oReq.addEventListener("load", reqListener);
                            oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+"&first=100")
                            //oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+"&first=100&started_at="+oneMonthAgo.toISOString()+"&ended_at="+today.toISOString())                            
                            oReq.setRequestHeader('client-id', clientid);
                            oReq.setRequestHeader('Authorization', 'Bearer '+ clientAuth);                    
                            oReq.send();
                            console.log(oReq);
                            console.log("So Command Triggered");                            
                        //finish
                        }
                    };
                    oUser.open("GET","https://api.twitch.tv/helix/users?login="+soChannel);
                    oUser.setRequestHeader('client-id', clientid);
                    oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
                    oUser.send();
                    console.log(oUser);
            };

            function barkLord(soChannel){
                if (recentClips == true)
                {
                    LordOfTheSith(soChannel,dateRange)
                } else {
                    bl(soChannel)
                }

            }

            function playVid(url) {
                isVidActive = true;
                container.style.visibility = 'visible';                
                shoutoutConfig.showTitle ? SODivs.style.visibility = 'visible' : SODivs.style.visibility = 'hidden';
                names[0] = names[0].replace("@", "");
                streamer.innerHTML = ' ' + names[0];
                console.log("Playing Clip")  
                video.setAttribute('src', url);
                video.muted = false;        
                video.play();
            }
    
            video.onended = function() {
                removeVid();
            };

            setInterval(function(){ 
                if (ClipOn == false)
                {
                    clips = [];
                    names = []; 
                    if (isVidActive)
                    {
                        removeVid();
                    }
                } 
                else if(clips.length > 0) 
                {
                    if(!isVidActive) {
                        playVid(clips[0]);
                    }
                }                  
            }, 1000);

            function removeVid(){
                video.muted = true;
                video.currentTime = 0;
                video.src = "";
                container.style.visibility = 'hidden';
                SODivs.style.visibility = 'hidden';               
                isVidActive = false;
                clips = clips.slice(1);
                names = names.slice(1);                
                console.log("Clip Ended!");
            }

            setInterval(function(){ 
                if(video.currentTime >= 90){
                    removeVid();
                }
            }, 800);    
        </script>
    </body>
</html>
