<html>
  <head>
    <script src="shoutoutconfig.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/comfy.js/dist/comfy.min.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet'>
  </head>
  <style>
    body {
      margin:0px;
    }
    #SODivs {
      font-family: 'Audiowide';
      font-size: 3em;
      word-wrap: none;
      visibility: hidden;
      top:0px;
      position:absolute;
      z-index: 10;
      text-align: center;
      width:100%;
      -webkit-text-stroke: 1px black;
        color: white;
        text-shadow:
        3px 3px 0 #000,
        -1px -1px 0 #000,  
        1px -1px 0 #000,
        -1px 1px 0 #000,
        1px 1px 0 #000;
        
    }
    #vids {
      visibility: hidden;
      width:100%;
      height:100%;
      top:0px;
      position: absolute;
    }
	#streamerName {
		color: #5e199e;
	}
  </style>
  <body>
    <div id="SODivs">Be Right Back!</div>
    <div id="player">
    <video id="vids" style="background-color: rgba(42, 179, 94, 0);" width="100%" height="100%" autoplay >
      <source src="" type="video/mp4">
      Your browser does not support the vids tag.
    </video>
    <script type="text/javascript">
    
    var vids = document.getElementById('vids');
    var container = document.getElementById('vids');
    var SODivs = document.getElementById('SODivs');    
    var streamer = document.getElementById('streamer');
    var clips = [];    
    var isVidActive;
    var mp4Name;
    var clientid = globalConfig.clientid;
    var clientSec = globalConfig.clientSec;
    var ClientAuthURL;
    var clientAuth;
    var soChannel = globalConfig.channelName;
    var soID = 0;
    var boardstr = globalConfig.channelName;
    var boardID;
    var RanClip = 0;   

    container.style.visibility = 'hidden';
    var oAuth = new XMLHttpRequest();
    oAuth.onreadystatechange = () => {
    if (oAuth.readyState === XMLHttpRequest.DONE) {
        clientAuth = JSON.parse(oAuth.responseText).access_token;
        console.log(clientAuth);
        getSOID(); 
        }
     };
   	oAuth.open("POST",'https://id.twitch.tv/oauth2/token?client_id='+clientid+'&client_secret='+clientSec+'&grant_type=client_credentials');
    oAuth.send();
   
    ComfyJS.onCommand = ( user, command, message, flags, extra ) => {
      
      if( flags.broadcaster && command == AlwaysRepeat || flags.mod && command == AlwaysRepeat || flags.mod && command == AlwaysRepeat2 || flags.broadcaster && command == AlwaysRepeat2  ) {  
          
         do
          {
            console.log('Waiting for SOID')
          }
          while (soID == 0);
          Repeat = 0;
          SODivs.innerHTML = AlwaysRepeatText;
          barklord();
      }
      
      if( flags.broadcaster && command == NoRepeat || flags.mod && command == NoRepeat || flags.mod && command == NoRepeat2 || flags.broadcaster && command == NoRepeat2  ) {  
          Repeat = 1;
          do
          {
            console.log('Waiting for SOID')
          }
          while (soID == 0);
          SODivs.innerHTML = NoRepeatText;
          barklord();
          
      }  
      cmd = command.toLowerCase(); 
      if(cmd === stopBRB.toLowerCase() && flags.broadcaster || cmd === stopBRB.toLowerCase() && flags.mod){
          location.reload();
      }
    };


      ComfyJS.Init( boardstr );
      
      function getSOID() {
        var oUser = new XMLHttpRequest();
        oUser.onreadystatechange = () => {
        if (oUser.readyState === XMLHttpRequest.DONE) {
            soID = JSON.parse(oUser.responseText);
            soID = soID.data[0].id
            console.log('SOD');
            console.log(soID);
            if (Repeat == 0)
            {
              barklord();
            }        
          }
        };
        oUser.open("GET","https://api.twitch.tv/helix/users?login="+boardstr);
        oUser.setRequestHeader('client-id', clientid);
		    oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
        oUser.send();
        console.log(oUser);      
      };

        async function twitchClipGQLDecode(slugid) {
            var jsonPayload = JSON.stringify({
                operationName: "VideoAccessToken_Clip",
                variables: {
                    slug: slugid
                },
                extensions: {
                    persistedQuery: {
                        version: 1,
                        sha256Hash: "36b89d2507fce29e5ca551df756d27c1cfe079e2609642b4390aa4c35796eb11"
                    }
                }
            });
            var headers = {
                "Client-ID": "kimne78kx3ncx6brgo4mv6wki5h1ko",
                "Content-Type": "application/json"
            };

            const response = await fetch("https://gql.twitch.tv/gql", {
                method: "POST",
                headers: headers,
                body: jsonPayload
            });

            if (!response.ok) {
                throw new Error("Request failed or returned no data.");
            }

            const data = await response.json();

            // Parse the response
            if (data.data.clip.videoQualities && data.data.clip.videoQualities.length > 0) {
                // Sort video qualities by bitrate
                data.data.clip.videoQualities.sort((a, b) => a.bitrate - b.bitrate);
            }

            // Extract playback access token and encode it
            const play = data.data.clip.playbackAccessToken.value;
            const encodedToken = encodeURIComponent(play);

            // Construct the download URL
            const downloadURL = `${data.data.clip.videoQualities[0].sourceURL}?sig=${data.data.clip.playbackAccessToken.signature}&token=${encodedToken}`;
            console.log(downloadURL);
            return downloadURL;
        }

        async function LordOfTheSith(soChannel, lenOfTime) {
            var today = new Date();
            var oneMonthAgo = new Date();
            oneMonthAgo.setDate(oneMonthAgo.getDate() - lenOfTime);
            var oUser = new XMLHttpRequest();
            oUser.onreadystatechange = () => {
                if (oUser.readyState === XMLHttpRequest.DONE) {
                    soID = JSON.parse(oUser.responseText);
                    soID = soID.data[0].id
                    console.log(soID);
                    //Start
                    function reqListener() {
                        mp4Name = JSON.parse(this.responseText);
                        if (mp4Name.data.length >= minClips) {
                            mp4Name.data.forEach(obj => {
                                mp4 = obj.id
                                twitchClipGQLDecode(mp4).then((clippers) => {
                                    console.log(clippers);
                                    if (clippers.length > 5) {
                                        clips.push(clippers);
                                        names.push(soChannel);
                                        console.log("Clip Found");
                                    } else {
                                        console.log("No Clips Found");
                                    }
                                console.log("Clip Found");
                                });                            
                            });
                        } else {
                            bL(soChannel);
                        }
                    }
                    var oReq = new XMLHttpRequest();
                    oReq.addEventListener("load", reqListener);
                    //oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+"&first=100")
                    oReq.open("GET", "https://api.twitch.tv/helix/clips?broadcaster_id=" + soID + "&first=100&started_at=" + oneMonthAgo.toISOString() + "&ended_at=" + today.toISOString())
                    oReq.setRequestHeader('client-id', clientid);
                    oReq.setRequestHeader('Authorization', 'Bearer ' + clientAuth);
                    oReq.send();
                    console.log(oReq);
                    console.log("So Command Triggered");
                    //finish
                }
            };
            oUser.open("GET", "https://api.twitch.tv/helix/users?login=" + soChannel);
            oUser.setRequestHeader('client-id', clientid);
            oUser.setRequestHeader('Authorization', 'Bearer ' + clientAuth);
            oUser.send();
            console.log(oUser);
        }

        async function bL(soChannel) {
            var today = new Date();
            var oneMonthAgo = new Date();
            oneMonthAgo.setDate(oneMonthAgo.getDate() - 30);
            var oUser = new XMLHttpRequest();

            oUser.onreadystatechange = async () => {
                if (oUser.readyState === XMLHttpRequest.DONE) {
                    soID = JSON.parse(oUser.responseText);
                    soID = soID.data[0].id;
                    console.log(soID);

                    // Start
                    function reqListener() {
                        mp4Name = JSON.parse(this.responseText);
                        mp4Name.data.forEach(obj => {
                            mp4 = obj.id
                            twitchClipGQLDecode(mp4).then((clippers) => {
                                console.log(clippers);
                                if (clippers.length > 5) {
                                    clips.push(clippers);
                                    //names.push(soChannel);
                                    console.log("Clip Found");
                                } else {
                                    console.log("No Clips Found");
                                }
                            });
                         });
                    }
                    var oReq = new XMLHttpRequest();
                    oReq.addEventListener("load", reqListener);
                    oReq.open("GET", "https://api.twitch.tv/helix/clips?broadcaster_id=" + soID + "&first=100");
                    oReq.setRequestHeader("client-id", clientid);
                    oReq.setRequestHeader("Authorization", "Bearer " + clientAuth);
                    oReq.send();
                    console.log(oReq);
                    console.log("So Command Triggered");
                }
            };

            oUser.open("GET", "https://api.twitch.tv/helix/users?login=" + soChannel);
            oUser.setRequestHeader("client-id", clientid);
            oUser.setRequestHeader("Authorization", "Bearer " + clientAuth);
            oUser.send();
            console.log(oUser);
        };
      
       function barkLord(){
                if (recentClips == true)
                {
                    LordOfTheSith(soChannel, dateRange);
                } else {
                    bl(soChannel);
                }

            }


  function playVid(url) {
        isVidActive = true;        
            container.style.visibility = 'visible';
            SODivs.style.visibility = 'visible';            
            console.log("Playing Clip")
        vids.setAttribute('src', url);
	      vids.muted = false;        
        vids.play();
      }    
      vids.onended = function() {
      removeVid();
    };

    setInterval(function(){ 
    if(clips.length > 0) {      
      console.log(clips.length);
      if(!isVidActive) {
        RanClip = Math.floor(Math.random() * clips.length);
        console.log(RanClip);
        playVid(clips[RanClip]);
        }
      }  else {
      if (Repeat == 0)
        {
          barklord();
        }  
      }  
    }, 1000);

    function removeVid(){
		    vids.muted = true;
        vids.currentTime = 0;
		    vids.src = "";        
        SODivs.style.visibility = 'hidden';        
        console.log(RanClip);
        var kill = RanClip;
        console.log(kill)
        clips.splice(kill,1);
        //names = names.slice(1);        
        console.log("Clip Ended!");
        isVidActive = false;        
    }

     setInterval(function(){ 
        if(vids.currentTime >= 90){
            removeVid();
        }
    }, 500);    

    </script>
  </body>
</html>
