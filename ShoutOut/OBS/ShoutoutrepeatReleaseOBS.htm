<html>
  <head>
    <script src="shoutoutconfig.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/comfy.js/dist/comfy.min.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet'>
  </head>
  <style>
    body {
      margin:0px;
    }
    #check {
      font-family: 'Audiowide';
      font-size: 3em;
      word-wrap: none;
      visibility: hidden;
      top:0px;
      position:absolute;
      z-index: 10;
      text-align: center;
      width:100%;
      -webkit-text-stroke: 1px black;
        color: white;
        text-shadow:
        3px 3px 0 #000,
        -1px -1px 0 #000,  
        1px -1px 0 #000,
        -1px 1px 0 #000,
        1px 1px 0 #000;
        
    }
    #video {
      visibility: hidden;
      width:100%;
      height:100%;
      top:0px;
      position: absolute;
    }
	#streamerName {
		color: #5e199e;
	}
  </style>
  <body>
    <div id="check">Be Right Back!</div>
    <div id="player">
    <video id="video" style="background-color: rgba(42, 179, 94, 0);" width="100%" height="100%" autoplay >
      <source src="" type="video/mp4">
      Your browser does not support the video tag.
    </video>
    <script type="text/javascript">
    
    var video = document.getElementById('video');
    var container = document.getElementById('video');
    var check = document.getElementById('check');    
    var streamer = document.getElementById('streamer');
    var clips = [];
    var names = [];
    var commandType = [];
    var isVideoPlaying;
    var mp4Res;
  	var listenBotSo = true;
    var listenBotSlug = true;
    var clientid = globalConfig.clientid;
    var clientSec = globalConfig.clientSec;
    var ClientAuthURL;
    var clientAuth;
    var soChannel;
    var soID = 0;
    var boardstr = globalConfig.channelName;
    var boardID;
    var RanClip = 0;  
    var Start = 0;


    container.style.visibility = 'hidden';
    var oAuth = new XMLHttpRequest();
    oAuth.onreadystatechange = () => {
    if (oAuth.readyState === XMLHttpRequest.DONE) {
        clientAuth = JSON.parse(oAuth.responseText).access_token;
        console.log(clientAuth);
        getSOID(); 
        }
     };
   	oAuth.open("POST",'https://id.twitch.tv/oauth2/token?client_id='+clientid+'&client_secret='+clientSec+'&grant_type=client_credentials');
    oAuth.send();
   
    ComfyJS.onCommand = ( user, command, message, flags, extra ) => {
      
      if( flags.broadcaster && command == AlwaysRepeat || flags.mod && command == AlwaysRepeat || flags.mod && command == AlwaysRepeat2 || flags.broadcaster && command == AlwaysRepeat2  ) {  
          
         do
          {
            console.log('Waiting for SOID')
          }
          while (soID == 0);
          Repeat = 0;
          check.innerHTML = AlwaysRepeatText;
          barklord();
      }
      
      if( flags.broadcaster && command == NoRepeat || flags.mod && command == NoRepeat || flags.mod && command == NoRepeat2 || flags.broadcaster && command == NoRepeat2  ) {  
          Repeat = 1;
          do
          {
            console.log('Waiting for SOID')
          }
          while (soID == 0);
          check.innerHTML = NoRepeatText;
          barklord();
          
      }  
      if(command === "resetso" && flags.broadcaster || command === "resetso" && flags.mod){
          location.reload();
      }
    };


      ComfyJS.Init( boardstr );
      
      function getSOID() {
        var oUser = new XMLHttpRequest();
        oUser.onreadystatechange = () => {
        if (oUser.readyState === XMLHttpRequest.DONE) {
            soID = JSON.parse(oUser.responseText);
            soID = soID.data[0].id
            console.log('SOD');
            console.log(soID);
          }
        };
        oUser.open("GET","https://api.twitch.tv/helix/users?login="+boardstr);
        oUser.setRequestHeader('client-id', clientid);
		    oUser.setRequestHeader('Authorization', 'Bearer '+ clientAuth);
        oUser.send();
        console.log(oUser);      
      };

      function barklord(){             
        function reqListener () {
                mp4Res = JSON.parse(this.responseText);                              
                console.log(mp4Res.data.length);
                if(mp4Res.data.length >= 1) 
                {
                    mp4Res.data.forEach(obj => {                
                    mp4 = obj.thumbnail_url
                    let submp4 = mp4.split('-preview');
                    console.log(submp4[0]+".mp4");
                    console.log(mp4);                  
                    clips.push(submp4[0]+".mp4");
                    names.push('');
                    commandType.push("clip");
                    console.log("Clip Found");
                    });
                  } 
                  else {
                    console.log("No Clips Found");
                  }                
        }        
        var oReq = new XMLHttpRequest();
        oReq.addEventListener("load", reqListener);
        oReq.open("GET","https://api.twitch.tv/helix/clips?broadcaster_id="+soID+'&first=100')
        oReq.setRequestHeader('client-id', clientid);
        oReq.setRequestHeader('Authorization', 'Bearer '+ clientAuth);        
        oReq.send();
        console.log(oReq);	        
      };    

  function playVid(url) {
        isVideoPlaying = true;        
            container.style.visibility = 'visible';
            check.style.visibility = 'visible';
            names[0] = names[0].replace("@", "");            
            console.log("Playing Clip")
        video.setAttribute('src', url);
	      video.muted = false;        
        video.play();
      }    
      video.onended = function() {
      removeVid();
    };

    setInterval(function(){ 
    if(clips.length > 0) {      
      console.log(clips.length);
      if(!isVideoPlaying) {
        RanClip = Math.floor(Math.random() * clips.length);
        console.log(RanClip);
        playVid(clips[RanClip]);
        }
      }  else {
      if (Repeat == 0 && Start != 0)
        {
          barklord();
        }  
      }  
    }, 1000);

    function removeVid(){
		    video.muted = true;
        video.currentTime = 0;
		    video.src = "";        
        check.style.visibility = 'hidden';        
        console.log(RanClip);
        var kill = RanClip;
        console.log(kill)
        clips.splice(kill,1);
        names = names.slice(1);        
        console.log("Clip Ended!");
        isVideoPlaying = false;        
    }

     setInterval(function(){ 
        if(video.currentTime >= 90){
            removeVid();
        }
    }, 500);    

    </script>
  </body>
</html>
